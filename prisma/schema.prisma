generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  email    String @unique
  username String @unique
  password String

  blocked     Boolean      @default(false)
  confirmed   Boolean      @default(false)
  signUpToken SignUpToken?

  role String @default("USER")

  avatar      String?
  socialMedia Json?     @map("social_media")
  coords      String?
  city        String?
  country     String?
  dateOfBirth DateTime? @map("date_of_birth")
  bio         String?

  followings Follow[] @relation("followings")
  followers  Follow[] @relation("followers")

  addedMarkers Marker[] @relation("addedMarkers")

  visits         MarkerVisitor[]
  markersReports MarkerReport[]
  markerComments MarkerComment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model SignUpToken {
  id Int @id @default(autoincrement())

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  token      String
  validUntil DateTime @map("valid_until")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sign_up_token")
}

model Marker {
  id String @id @default(cuid())

  address Json

  lat Float
  lng Float

  confirmed Boolean @default(false)

  images Json

  addedByUserId String @map("added_by_user_id")
  addedBy       User   @relation(name: "addedMarkers", fields: [addedByUserId], references: [id])

  comments MarkerComment[]
  visitors MarkerVisitor[]

  reports MarkerReport[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("marker")
}

model MarkerVisitor {
  id Int @id @default(autoincrement())

  markerId String @map("marker_id")
  marker   Marker @relation(fields: [markerId], references: [id])

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([markerId, userId])
  @@map("marker_visitor")
}

model MarkerReport {
  id Int @id @default(autoincrement())

  markerId String @map("marker_id")
  marker   Marker @relation(fields: [markerId], references: [id])

  reportedByUserId String @map("reported_by_user_id")
  reportedBy       User   @relation(fields: [reportedByUserId], references: [id])

  type    String
  message String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([markerId, reportedByUserId])
  @@map("marker_report")
}

model MarkerComment {
  id Int @id @default(autoincrement())

  markerId String @map("marker_id")
  marker   Marker @relation(fields: [markerId], references: [id])

  commentedByUserId String @map("commented_by_user_id")
  commentedBy       User   @relation(fields: [commentedByUserId], references: [id])

  message String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("marker_comment")
}

model Follow {
  id Int @id @default(autoincrement())

  whoFollowUserId  String @map("who_follow_user_id")
  whoFollowUser    User   @relation(name: "followings", fields: [whoFollowUserId], references: [id])
  whomFollowUserId String @map("whom_follow_user_id")
  whomFollowUser   User   @relation(name: "followers", fields: [whomFollowUserId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([whoFollowUserId, whomFollowUserId])
  @@map("follow")
}
